SET SERVEROUTPUT ON
--Generate XML USING XMLGEN.GETXML (for clob output) 
--XMLGEN.GETXMLTYPE (FOR XMLTYPE OUTPUT) 
--QRYCONTEXT HANDLE IS DERIVED FROM SYS REF CURSOR
DECLARE 
    L_REFCURS SYS_REFCURSOR;
    QRYCTXCLOB DBMS_XMLGEN.CTXHANDLE;
    QRYCTXXMLTYPE DBMS_XMLGEN.CTXHANDLE;
    RESULTXMLCLOB CLOB;
    RESULTXMLTYPE XMLTYPE;
BEGIN
    OPEN L_REFCURS FOR SELECT DEPARTMENT_ID,
                              DEPARTMENT_NAME
                        FROM DEPARTMENTS
                        WHERE DEPARTMENT_ID =30;
QRYCTXCLOB := DBMS_XMLGEN.NEWCONTEXT(L_REFCURS);
RESULTXMLCLOB := DBMS_XMLGEN.GETXML(QRYCTXCLOB);
QRYCTXXMLTYPE := DBMS_XMLGEN.NEWCONTEXT(L_REFCURS);
RESULTXMLTYPE := DBMS_XMLGEN.GETXMLTYPE(QRYCTXXMLTYPE);

DBMS_OUTPUT.PUT_LINE('****CLOB OUTPUT******');
DBMS_OUTPUT.PUT_LINE(RESULTXMLCLOB);
DBMS_OUTPUT.PUT_LINE('****XMLTYPE OUTPUT******');
DBMS_OUTPUT.PUT_LINE(RESULTXMLTYPE.GETCLOBVAL); --THIS IS HOW TO ACCESS XMLTYPE DATA
END;

--CURSOR IN GETXML & GETXMLTYPE
SELECT DBMS_XMLGEN.GETXML(
'SELECT DEPARTMENT_ID, DEPARTMENT_NAME,
CURSOR(SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES E WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID)
EMP_ROW
FROM DEPARTMENTS D WHERE D.DEPARTMENT_ID = 10'
)FROM DUAL;

SELECT DBMS_XMLGEN.GETXMLTYPE(
'SELECT DEPARTMENT_ID, DEPARTMENT_NAME,
CURSOR(SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES E WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID)
EMP_ROW
FROM DEPARTMENTS D WHERE D.DEPARTMENT_ID = 10'
)FROM DUAL;


--GETXML, GETXMLTYPE CAN BE INVOKED IN SELECT STATEMENT AS WELL
SELECT DBMS_XMLGEN.GETXML(
'SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=10') 
FROM DUAL;

SELECT DBMS_XMLGEN.GETXMLTYPE(
'SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=10') 
FROM DUAL;

--SELECT QUERY CAN DIRECTLY BE ASSIGNED TO DATATYPE DEFINED
DECLARE
RESULTS CLOB;
BEGIN
RESULTS:=DBMS_XMLGEN.GETXML(
'SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=10');
DBMS_OUTPUT.PUT_LINE(RESULTS);
END;

DECLARE
RESULTS XMLTYPE;
BEGIN
RESULTS:=DBMS_XMLGEN.GETXMLTYPE(
'SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID=10');
--XMLTYPE VARIABLE CANNOT BE PRINTED DIRECTLY, USE GETCLOBVAL
DBMS_OUTPUT.PUT_LINE(RESULTS.GETCLOBVAL); 
END;

--SELECT QUERY INSIDE CONTEXT HANDLE
DECLARE 
    QRYCTX DBMS_XMLGEN.CTXHANDLE;
    RESULT CLOB;
BEGIN
   QRYCTX := DBMS_XMLGEN.NEWCONTEXT('SELECT *
                        FROM DEPARTMENTS
                        WHERE DEPARTMENT_ID IN (10)');
RESULT := DBMS_XMLGEN.GETXML(QRYCTX);
DBMS_OUTPUT.PUT_LINE(RESULT);
END;

DECLARE 
    QRYCTX DBMS_XMLGEN.CTXHANDLE;
    RESULT XMLTYPE;
BEGIN
   QRYCTX := DBMS_XMLGEN.NEWCONTEXT('SELECT *
                        FROM DEPARTMENTS
                        WHERE DEPARTMENT_ID IN (10)');
RESULT := DBMS_XMLGEN.GETXMLTYPE(QRYCTX);
DBMS_OUTPUT.PUT_LINE(RESULT.GETCLOBVAL);
END;

--CREATE TABLE AND INSERT DATA 

drop table t_xmlinsert;
CREATE TABLE T_XMLINSERT (N XMLTYPE);

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=30;

DECLARE
QRYCTX DBMS_XMLGEN.CTXHANDLE;
RESULT XMLTYPE;
BEGIN
QRYCTX:= DBMS_XMLGEN.NEWCONTEXT('SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID=30');
RESULT := DBMS_XMLGEN.GETXMLTYPE(QRYCTX);
DBMS_XMLGEN.CLOSECONTEXT(QRYCTX);
INSERT INTO T_XMLINSERT VALUES (RESULT);
DBMS_OUTPUT.PUT_LINE(RESULT.GETCLOBVAL);
DBMS_OUTPUT.PUT_LINE('**************************');
END;

SELECT * FROM T_XMLINSERT;

--clob datasize is 32k, xmltype datasize is 2gb or so
--if xml data to inserted in table is more than datasize mentioned above then use setmaxrow

drop table t_xmlinsert_all;
CREATE TABLE T_XMLINSERT_all (RESULT CLOB);

DECLARE
QRYCTX DBMS_XMLGEN.CTXHANDLE;
RESULT CLOB;
BEGIN
QRYCTX:= DBMS_XMLGEN.NEWCONTEXT('SELECT * FROM EMPLOYEES'); 
--105 records exceeds 32k limit 
DBMS_XMLGEN.SETMAXROWS(QRYCTX,5);
LOOP
    RESULT := DBMS_XMLGEN.GETXML(QRYCTX);
    EXIT WHEN DBMS_XMLGEN.GETNUMROWSPROCESSED(QRYCTX)=0;
INSERT INTO T_XMLINSERT_ALL VALUES (RESULT);
DBMS_OUTPUT.PUT_LINE(RESULT);
END LOOP;
DBMS_XMLGEN.CLOSECONTEXT(QRYCTX);
END;

SELECT * FROM T_XMLINSERT_ALL;
SELECT COUNT(*) FROM EMPLOYEES;

SELECT COUNT(*) FROM T_XMLINSERT_ALL;
